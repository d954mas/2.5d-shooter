local COMMON = require "libs.common"
local SM = require "libs.sm.sm"

---@class SMSceneControllerSelf
---@field scene Scene

---@param self SMSceneControllerSelf

local function sm_init(self, message_id, message, sender)
    self.scene = assert(SM:get_scene_by_name(message.scene_name))
    self.scene:on_init(self)
end

---@param self SMSceneControllerSelf
local function sm_show(self)
    self.scene:on_show()
end
---@param self SMSceneControllerSelf
local function sm_hide(self)
    self.scene:on_hide()
end
---@param self SMSceneControllerSelf
local function sm_pause(self)
    self.scene:on_pause()
end

---@param self SMSceneControllerSelf
local function sm_resume(self)
    self.scene:on_resume()
end
---@param self SMSceneControllerSelf
local function check_transition_coroutine(self)
    if coroutine.status(self.transition_co) == "dead" then
        self.transition_co = nil
        self.scene._in_transition = false
        COMMON.i(self.scene._name .. " transition:" .. (os.clock() - self.transition_time))
    end
end

---@param self SMSceneControllerSelf
local function sm_transition(self,message_id,message)
    assert(not self.transition_co)
    self.transition_co = coroutine.create(self.scene.on_transition)
    self.transition_time = os.clock()
    COMMON.coroutine_resume(self.transition_co,self.scene,message.transition)
    check_transition_coroutine(self)

end

---@param self SMSceneControllerSelf
function init(self)
    self.msg_receiver = COMMON.MSG()
    self.msg_receiver:add(COMMON.HASHES.MSG_SM_INIT, sm_init)
    self.msg_receiver:add(COMMON.HASHES.MSG_SM_SHOW, sm_show)
    self.msg_receiver:add(COMMON.HASHES.MSG_SM_HIDE, sm_hide)
    self.msg_receiver:add(COMMON.HASHES.MSG_SM_PAUSE, sm_pause)
    self.msg_receiver:add(COMMON.HASHES.MSG_SM_RESUME, sm_resume)
    self.msg_receiver:add(COMMON.HASHES.MSG_SM_TRANSITION, sm_transition)
end

---@param self SMSceneControllerSelf
function on_message(self, message_id, message, sender)
    --hide sm messages
    if not self.msg_receiver:on_message(self, message_id, message, sender) then
        if self.scene then self.scene:on_message(message_id, message, sender) end
    end
end

---@param self SMSceneControllerSelf
function final(self)
    if self.scene then self.scene:on_final() end
    self.scene = nil
end

---@param self SMSceneControllerSelf
function update(self, dt)
    if self.scene and self.scene._state == self.scene.STATIC.STATES.RUNNING then self.scene:on_update(dt)end
    if self.scene and self.transition_co then
        check_transition_coroutine(self)
        if self.transition_co then
            COMMON.coroutine_resume(self.transition_co,self.scene,dt)
        end
    end
end

---@param self SMSceneControllerSelf
function on_input(self, action_id, action)
    if self.scene then self.scene:on_input(action_id, action) end
end

---@param self SMSceneControllerSelf
function on_reload(self)
    if self.scene then self.scene:on_reload() end
end
