local COMMON = require "libs.common"
local DEBUG_INFO = require "debug.debug_info"
local GUI = require "libs.gui.gui"
local GOOEY = require "gooey.gooey"
local SM = require "libs_project.sm"

local Script = COMMON.new_n28s()

function Script:bind_vh()
	self.vh = {
		node_root = gui.get_node("root"),
		lbl_game_speed = gui.get_node("game_speed/lbl"),
		lbl_cpu = gui.get_node("lbl_cpu"),
		lbl_memory = gui.get_node("lbl_memory"),
	}
	self.views = {
		btn_top_panel_show = GUI.ButtonIconTest("btn_top_panel_show"),
		btn_profiler = GUI.ButtonIconTest("btn_profiler"),
		btn_time_up = GUI.ButtonIconTest("game_speed/btn_up"),
		btn_time_down = GUI.ButtonIconTest("game_speed/btn_down"),
	}
	self.views.btn_top_panel_show:set_input_listener(function()
		self:input_toggle_gui_visible()
	end)
	self.views.btn_profiler:set_input_listener(function()
		self.views.btn_profiler.show_profiler = not self.views.btn_profiler.show_profiler
		profiler.enable_ui(self.views.btn_profiler.show_profiler)
	end)
	self.views.btn_time_up:set_input_listener(function()
		self:speed_game_set(1)
	end)
	self.views.btn_time_down:set_input_listener(function()
		self:speed_game_set(-1)
	end)
end

function Script:speed_game_set(value)
	local scale = 0.1 * value
	if (value > 0 and COMMON.GLOBAL.speed_game >= 0.999999999)  or (value < 0 and COMMON.GLOBAL.speed_game > 1) then
		scale = 0.25 * value
	end
	COMMON.GLOBAL.speed_game = COMMON.LUME.clamp(COMMON.GLOBAL.speed_game + scale,0.1,10)
	self.speed_game_changed = true
end

function Script:init()
	gui.set_render_order(15)
	self:bind_vh()
	self.input = COMMON.INPUT()
	self.input.acquire()
	self.input:add(hash("toggle_top_panel_show_btn"), self.input_toggle_gui_visible, true)
	self.show_btn_top_panel_show = true
	self.show = true
	self:input_toggle_gui_visible()
end

function Script:update(dt)
	if self.show then
		gui.set_text(self.vh.lbl_game_speed, string.format("Speed:%.2f", COMMON.GLOBAL.speed_game))
		gui.set_text(self.vh.lbl_cpu, "Cpu:" .. string.format("%.2f", profiler.get_cpu_usage()))
		gui.set_text(self.vh.lbl_memory, "Mem:" .. string.format("%.2f Mb", profiler.get_memory_usage()/1024/1024))
	end

	local scene = SM.stack:peek()
	if scene and (scene ~= self.scene_current or self.speed_game_changed) then
		self.scene_current = scene
		self.speed_game_changed = false
		msg.post(scene._url.path, COMMON.HASHES.MSG.SET_TIME_STEP, { factor = COMMON.GLOBAL.speed_game, mode = 0 })
	end
end

function Script:final()
	self.input.release()
end

function Script:input_toggle_gui_visible()
	self.show = not self.show
	profiler.set_ui_vsync_wait_visible(false)
	gui.set_enabled(self.vh.node_root, self.show)
	return true
end

function Script:on_input(action_id, action)
	if (self.input:on_input(self, action_id, action)) then return true end
	if (self.views.btn_top_panel_show:on_input(action_id, action).consumed) then return true end
	if(self.show) then
		if(self.views.btn_profiler:on_input(action_id, action).consumed) then return true end
		if(self.views.btn_time_up:on_input(action_id, action).consumed) then return true end
		if(self.views.btn_time_down:on_input(action_id, action).consumed) then return true end
	end
end

COMMON.N28S.register(Script())