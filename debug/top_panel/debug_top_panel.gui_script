local COMMON = require "libs.common"
local CONSTANTS = require "libs_project.constants"
local GUI = require "libs.gui.gui"
local SM = require "libs_project.sm"
local DEBUG_INFO = require "debug.debug_info"
local SceneDebugView = require "debug.view.scene_debug_view"
local WORLD = require "model.world"
local LEVEL_MAP = require "debug.level_map.debug_level_map_view"

local Script = COMMON.new_n28s()

function Script:bind_vh()
	self.vh = {
		node_root = gui.get_node("root"),
		lbl_game_speed = gui.get_node("game_speed/lbl"),
		lbl_cpu = gui.get_node("lbl_cpu"),
		lbl_memory = gui.get_node("lbl_memory"),
	}
	self.views = {
		btn_top_panel_show = GUI.ButtonIconTest("btn_top_panel_show"),
		btn_profiler = GUI.ButtonIconTest("btn_profiler"),

		btn_scene = GUI.ButtonIconTest("btn_scene"),
		btn_time_up = GUI.ButtonIconTest("game_speed/btn_up"),
		btn_time_down = GUI.ButtonIconTest("game_speed/btn_down"),
		scene_debug_view = SceneDebugView("scene_debug_view"),
		panels = {
			render = {
				root = gui.get_node("panel_render"),
				btn_activate = GUI.ButtonIconTest("btn_render"),
				childs = {
					btn_light_map = GUI.ButtonIconTest("panel_render/btn_light_map"),
					btn_dynamic_light = GUI.ButtonIconTest("panel_render/btn_dynamic_light")
				},
				config = {}
			},
			game = {
				root = gui.get_node("panel_game"),
				btn_activate = GUI.ButtonIconTest("btn_game"),
				childs = {
					btn_ecs_systems = GUI.ButtonIconTest("panel_game/btn_ecs_systems"),
					btn_level_map = GUI.ButtonIconTest("panel_game/btn_level_map"),
					btn_game_info = GUI.ButtonIconTest("panel_game/btn_game_info"),
					checkbox_draw_physics = GUI.CheckboxWithLabel("panel_game/checkbox_draw_physics"),
					checkbox_draw_debug_light = GUI.CheckboxWithLabel("panel_game/checkbox_draw_debug_light"),
					lbl_ecs_systems = gui.get_node("panel_game/lbl_ecs_systems"),
					lbl_info_1 = gui.get_node("panel_game/info_1"),
					level_map = LEVEL_MAP("panel_game/level_map")
				},
				config = { show_systems = false, show_level_map = false, show_game_info = false }
			}
		}
	}
end

function Script:init_gui()
	self.views.scene_debug_view:set_enabled(false)
	self.views.btn_top_panel_show:set_input_listener(function()
		self:input_toggle_gui_visible()
	end)
	self.views.btn_profiler:set_input_listener(function()
		self.views.btn_profiler.show_profiler = not self.views.btn_profiler.show_profiler
		profiler.enable_ui(self.views.btn_profiler.show_profiler)
	end)
	self.views.btn_scene:set_input_listener(function()
		self.views.scene_debug_view:set_enabled(not gui.is_enabled(self.views.scene_debug_view.vh.root))
	end)
	self.views.btn_time_up:set_input_listener(function()
		self:speed_game_set(1)
	end)
	self.views.btn_time_down:set_input_listener(function()
		self:speed_game_set(-1)
	end)

	self.views.panels.render.btn_activate:set_input_listener(function()
		self:panel_show(self.views.panels.render)
	end)
	self.views.panels.game.btn_activate:set_input_listener(function()
		self:panel_show(self.views.panels.game)
	end)

	self.views.panels.render.childs.btn_light_map:set_input_listener(function()
		CONSTANTS.DEBUG.draw_light_map = not CONSTANTS.DEBUG.draw_light_map
	end)

	self.views.panels.render.childs.btn_dynamic_light:set_input_listener(function()
		CONSTANTS.DEBUG.draw_light_dynamic = not CONSTANTS.DEBUG.draw_light_dynamic
	end)

	self.views.panels.game.childs.btn_ecs_systems:set_input_listener(function()
		local game = self.views.panels.game
		game.config.show_systems = not game.config.show_systems
		gui.set_enabled(game.childs.lbl_ecs_systems, game.config.show_systems)
	end)
	self.views.panels.game.childs.btn_level_map:set_input_listener(function()
		local game = self.views.panels.game
		game.config.show_level_map = not game.config.show_level_map
		gui.set_enabled(game.childs.level_map.vh.map_node, game.config.show_level_map)
	end)

	self.views.panels.game.childs.btn_game_info:set_input_listener(function()
		local game = self.views.panels.game
		game.config.show_game_info = not game.config.show_game_info
		gui.set_enabled(game.childs.lbl_info_1, game.config.show_game_info)
	end)

	self.views.panels.game.childs.checkbox_draw_debug_light:set_checked(CONSTANTS.DEBUG.draw_light_debug_object)
	self.views.panels.game.childs.checkbox_draw_debug_light:set_input_listener(function()
		CONSTANTS.DEBUG.draw_light_debug_object = self.views.panels.game.childs.checkbox_draw_debug_light.checked
	end)

	self.views.panels.game.childs.checkbox_draw_physics:set_checked(CONSTANTS.DEBUG.draw_physics)
	self.views.panels.game.childs.checkbox_draw_physics:set_input_listener(function()
		CONSTANTS.DEBUG.draw_physics = self.views.panels.game.childs.checkbox_draw_physics.checked
	end)


	self.views.panels.game.update = function(dt)
		local game = self.views.panels.game
		local config = self.views.panels.game.config

		DEBUG_INFO.update_entities()

		if config.show_systems then
			local text = ""
			if (WORLD.battle_model and WORLD.battle_model.ecs) then
				text = text .. string.format("%-30s %-7s %-9s %-6s %-6s %-6s \n", "Name", "Active", "Entities", "T", "TAvg", "TMax")
				for _, sys in ipairs(WORLD.battle_model.ecs.ecs.systems) do
					local count = 0
					for _, _ in pairs(sys.entities) do
						count = count + 1
					end
					text = text .. string.format("%-30s %-7s %-9d %-6.2f %-6.2f %-6.2f\n", sys.name, tostring(sys.active), count,
							sys._time.current * 1000, sys._time.average * 1000, sys._time.max * 1000)
				end
			end
			gui.set_text(game.childs.lbl_ecs_systems, text)
		end
		if config.show_level_map then
			game.childs.level_map:update(dt)
		end
		if config.show_game_info then
			gui.set_text(game.childs.lbl_info_1, string.format("Player:(%.1f %.1f %.1f)\nwalls:%d\nceils/floors:%d", DEBUG_INFO.hero_pos.x,
					DEBUG_INFO.hero_pos.y, DEBUG_INFO.hero_pos.z, DEBUG_INFO.walls, DEBUG_INFO.floors + DEBUG_INFO.ceils))
		end
	end
	gui.set_enabled(self.views.panels.game.childs.level_map.vh.map_node, false)

	self:panel_hide_all()
end

function Script:panel_hide_all()
	for _, panel in pairs(self.views.panels) do
		gui.set_enabled(panel.root, false)
	end
end

function Script:panel_update(dt)
	for _, panel in pairs(self.views.panels) do
		if (gui.is_enabled(panel.root) and panel.update) then
			panel.update(dt)
		end
	end
end

function Script:panel_show(panel)
	self:panel_hide_all()
	gui.set_enabled(panel.root, true)
end

function Script:panel_input(action_id, action)
	for _, panel in pairs(self.views.panels) do
		if (panel.btn_activate:on_input(action_id, action)) then return true end
	end

	for _, panel in pairs(self.views.panels) do
		if (gui.is_enabled(panel.root)) then
			for _, child in pairs(panel.childs) do
				if (type(child) == "table" and child.on_input and child:on_input(action_id, action)) then return true end
			end
		end
	end
end

function Script:speed_game_set(value)
	local scale = 0.1 * value
	if (value > 0 and COMMON.GLOBAL.speed_game >= 0.999999999) or (value < 0 and COMMON.GLOBAL.speed_game > 1) then
		scale = 0.25 * value
	end
	COMMON.GLOBAL.speed_game = COMMON.LUME.clamp(COMMON.GLOBAL.speed_game + scale, 0.1, 10)
	self.speed_game_changed = true
end

function Script:init()
	gui.set_render_order(15)
	self:bind_vh()
	self:init_gui()
	self.input = COMMON.INPUT()
	self.input.acquire()
	self.input:add(hash("toggle_top_panel_show_btn"), self.input_toggle_gui_visible, true)
	self.show_btn_top_panel_show = true
	self.show = true
	self:input_toggle_gui_visible()
end

function Script:update(dt)
	if self.show then
		gui.set_text(self.vh.lbl_game_speed, string.format("Speed:%.2f", COMMON.GLOBAL.speed_game))
		gui.set_text(self.vh.lbl_cpu, "Cpu:" .. string.format("%.2f", profiler.get_cpu_usage()))
		gui.set_text(self.vh.lbl_memory, "Mem:" .. string.format("%.2f Mb", profiler.get_memory_usage() / 1024 / 1024))
		self:panel_update(dt)
	end

	self.views.scene_debug_view:update(dt)

	local scene = SM.stack:peek()
	if scene and (scene ~= self.scene_current or self.speed_game_changed) then
		self.scene_current = scene
		self.speed_game_changed = false
		msg.post(scene._url.path, COMMON.HASHES.MSG.SET_TIME_STEP, { factor = COMMON.GLOBAL.speed_game, mode = 0 })
	end
end

function Script:final()
	self.input.release()
end

function Script:input_toggle_gui_visible()
	self.show = not self.show
	profiler.set_ui_vsync_wait_visible(false)
	gui.set_enabled(self.vh.node_root, self.show)
	return true
end

function Script:on_input(action_id, action)
	if (self.input:on_input(self, action_id, action)) then return true end
	if (self.views.btn_top_panel_show:on_input(action_id, action)) then return true end
	if (self.show) then
		if (self.views.btn_profiler:on_input(action_id, action)) then return true end
		if (self.views.btn_scene:on_input(action_id, action)) then return true end
		if (self.views.btn_time_up:on_input(action_id, action)) then return true end
		if (self.views.btn_time_down:on_input(action_id, action)) then return true end

		if (self:panel_input(action_id, action)) then return true end
	end
end

COMMON.N28S.register(Script())