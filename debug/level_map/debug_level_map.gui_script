local COMMON = require "libs.common"
local GAME_CONTROLLER = require "scenes.game.model.game_controller"



local WHITE_COLOR = string.char(0xff) .. string.char(0xff) .. string.char(0xff) .. string.char(0xff)
local WALL_COLOR = string.char(0xaa) .. string.char(0xaa) .. string.char(0xaa) .. string.char(0xff)
local NO_WALLS_COLOR = string.char(0x00) .. string.char(0x00) .. string.char(0x00) .. string.char(0xff)
local TRANSPARENT_COLOR = string.char(0x00) .. string.char(0x00) .. string.char(0x00) .. string.char(0x00)
local VISIBLE_COLOR = string.char(0xff) .. string.char(0x00) .. string.char(0x00) .. string.char(0x33)
local MIN_SIZE = 300

local Script = COMMON.new_n28s()

function Script:init()
	self.vh = {
		map_node = gui.get_node("map"),
		map_visibility_node = gui.get_node("visibility"),
		player_node = gui.get_node("player")
	}
	self.map_texture = nil
	self.scheduler = COMMON.RX.CooperativeScheduler.create()

	self.subscriptions = COMMON.RX.SubscriptionsStorage()
	self.subscriptions:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.GAME_LEVEL_MAP_CHANGED):go_distinct(self.scheduler)
								   :subscribe(function (event)
		self:clear_textures()
		local width, height = GAME_CONTROLLER.level:map_get_width(),GAME_CONTROLLER.level:map_get_height()
		gui.new_texture("map", width, height, "rgba", string.rep(WHITE_COLOR,  width * height))
		gui.new_texture("map_visibility", width, height, "rgba", string.rep(TRANSPARENT_COLOR,  width * height))
		gui.set_texture(self.vh.map_node, "map")
		gui.set_texture(self.vh.map_visibility_node, "map_visibility")
		gui.set_size(self.vh.map_node,vmath.vector3(width,height,1))
		gui.set_size(self.vh.map_visibility_node,vmath.vector3(width,height,1))
	end))
end

function Script:clear_textures()
	if self.map_texture then
		gui.delete_texture("map")
		gui.delete_texture("map_visibility")
		self.map_texture = nil
		self.map_visibility_texture = nil
	end
end

function Script:update_map()
	if not GAME_CONTROLLER.level then return end
	local map_width =  GAME_CONTROLLER.level:map_get_width()
	local map_height =  GAME_CONTROLLER.level:map_get_height()
	--fast string concat https://stackoverflow.com/questions/19138974/does-lua-optimize-the-operator
	local buf_visible = {}
	local buf = {}
	local index = 0
	for y = 1, map_height do
		for x=1, map_width do
			index = index+1
			local cell = GAME_CONTROLLER.level:map_get_cell_unsafe(x,y)
			buf_visible[index] = native_raycasting.cells_get_by_id(cell.id):get_visibility() and VISIBLE_COLOR or TRANSPARENT_COLOR
			--empty cell
			buf[index] = cell.blocked and WALL_COLOR or WHITE_COLOR
		end
	end
	gui.set_texture_data("map", map_width, map_height, "rgba", table.concat(buf),true)
	gui.set_texture_data("map_visibility", map_width, map_height, "rgba", table.concat(buf_visible),true)
	local scale = vmath.vector3(1)
	if map_width<map_height then
		scale.x = MIN_SIZE/map_width
	else
		scale.x = MIN_SIZE/map_height
	end
	scale.y = scale.x
	gui.set_scale(self.vh.map_node, scale)
	gui.set_position(self.vh.player_node,vmath.vector3(GAME_CONTROLLER.level.player.position.x,GAME_CONTROLLER.level.player.position.y,0))
	gui.set_position(self.vh.map_node, vmath.vector3(1920-map_width*scale.x,1080-map_height*scale.y,1))
end

function Script:update(dt)
	self.scheduler:update(dt)
	self:update_map()
end

function Script:final()
	self.subscriptions:unsubscribe()
end

COMMON.N28S.register(Script)