local COMMON = require "libs.common"
local RENDERCAM = require "rendercam.rendercam"
local RENDERCAM_VIEWPORT = RENDERCAM.viewport

local Render = COMMON.new_n28s()
--region init
function Render:init()
    self.clear_color = vmath.vector4(0)
    self:init_predicates()
    self:init_rendercam()
    self:register_messages()
end

function Render:init_predicates()
    self.predicates = {
        tile = render.predicate({"tile"}),
        gui = render.predicate({"gui"}),
        text = render.predicate({"text"}),
        model = render.predicate({"model"}),
        particle = render.predicate({"particle"}),
        sprite_3d = render.predicate({"sprite_3d"}),
    }
end

function Render:init_rendercam()
    RENDERCAM.configWin.x = render.get_width();
    RENDERCAM.configWin.y = render.get_height()
    RENDERCAM.update_window_size(render.get_window_width(), render.get_window_height())
    self:window_size_changed()
end

function Render:register_messages()
    self.msg_receiver = COMMON.MSG()
    self.msg_receiver:add("clear_color",function(self,_,message)  self.clear_color = message.color end)
    -- sent by rendercam when a camera is activated ("window_resized" engine message requires data)
    self.msg_receiver:add("update window",self.window_size_changed)
    self.msg_receiver:add("window_resized",self.window_size_changed)
end
--endregion


function Render:window_size_changed()
    RENDERCAM.update_window(render.get_window_width(), render.get_window_height())
    self.gui_proj = vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1)
end

function Render:draw_gui()
    -- GUI Rendering
    render.set_viewport(0, 0, RENDERCAM.window.x, RENDERCAM.window.y)
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.predicates.gui)
    render.draw(self.predicates.text)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function Render:draw_sprites()
    render.set_depth_mask(false)

    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.disable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

    render.draw(self.predicates.tile)
    render.draw(self.predicates.particle)
    render.draw_debug3d()
end

function Render:draw_3d()
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.predicates.model)
    render.draw(self.predicates.sprite_3d)
    -- Debug rendering - physics debug, draw_line
    render.disable_state(render.STATE_DEPTH_TEST)

end

function Render:update(dt)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(RENDERCAM_VIEWPORT.x, RENDERCAM_VIEWPORT.y, RENDERCAM_VIEWPORT.width, RENDERCAM_VIEWPORT.height)
    render.set_view(RENDERCAM.calculate_view())
    render.set_projection(RENDERCAM.calculate_proj())

    self:draw_sprites()
    self:draw_3d()
    self:draw_gui()
end

function Render:on_message(message_id, message)
    self.msg_receiver:on_message(self,message_id,message)
end

COMMON.N28S.register(Render)