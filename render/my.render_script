local COMMON = require "libs.common"
local RENDERCAM = require "rendercam.rendercam"
local EVENTS = require "libs_project.events"

--draw all ambient light of level to texture
--if level bigger then LIGHT_MAP_SIZE there will be problems
local LIGHT_MAP_SIZE = 128
local TAG = "Render"

---@class Render
local Render = COMMON.new_n28s()
--region init
function Render:init()
	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.screen_size = {
		w = render.get_window_width(),
		h = render.get_window_height(),
	}
	self:init_predicates()
	self:init_rendercam()
	self:init_render_targets()
	self:init_buffers()
	self:init_constants_buffers()
	self:register_messages()

	COMMON.RENDER = self
end

function Render:create_render_target(name, params)
	-- render target buffer parameters
	local color_params = { format = params.format or render.FORMAT_RGBA,
						   width = assert(params.w),
						   height = assert(params.h),
						   min_filter = params.min_filter or render.FILTER_LINEAR,
						   mag_filter = params.mag_filter or render.FILTER_LINEAR,
						   u_wrap = params.u_wrap or render.WRAP_CLAMP_TO_EDGE,
						   v_wrap = params.v_wrap or render.WRAP_CLAMP_TO_EDGE }
	local depth_params = { format = render.FORMAT_DEPTH,
						   width = params.w,
						   height = params.h,
						   u_wrap = params.u_wrap or render.WRAP_CLAMP_TO_EDGE,
						   v_wrap = params.v_wrap or render.WRAP_CLAMP_TO_EDGE }
	return render.render_target(assert(name), { [render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params })
end

function Render:init_render_targets()
	self.targets = {}
end

function Render:init_buffers()
	self.buffers = {}
end

function Render:init_predicates()
	self.predicates = {
		tile = render.predicate({ "tile" }),
		gui = render.predicate({ "gui" }),
		text = render.predicate({ "text" }),
		model = render.predicate({ "model" }),
		particle = render.predicate({ "particle" }),
	}
end

function Render:init_rendercam()
	RENDERCAM.configWin.x = render.get_width();
	RENDERCAM.configWin.y = render.get_height()
	RENDERCAM.update_window_size(self.screen_size.w, self.screen_size.h)
	self:window_size_changed()
end

function Render:init_constants_buffers()
	self.constants_buffers = {
		light_map = render.constant_buffer(),
	}
	self.constants_buffers.light_map.light_map = vmath.vector4(LIGHT_MAP_SIZE, LIGHT_MAP_SIZE, 0, 0)
	self.constants_buffers.light_map.fog_color = vmath.vector4(0.15)
	self.constants_buffers.light_map.fog = vmath.vector4(2, 0, 0.1, 0) -- //x start distance y end dist. z exp

end

function Render:register_messages()
	self.msg_receiver = COMMON.MSG()
	self.msg_receiver:add(COMMON.HASHES.MSG.RENDER.CLEAR_COLOR, function(_, _, message)
		self.clear_color = message.color
	end)
	-- sent by rendercam when a camera is activated ("window_resized" engine message requires data)
	self.msg_receiver:add("update window", self.window_size_changed)
	self.msg_receiver:add(COMMON.HASHES.MSG.RENDER.WINDOW_RESIZED, function(...)
		local prev_w = self.screen_size.w
		local prev_h = self.screen_size.h
		self.screen_size.w = render.get_window_width()
		self.screen_size.h = render.get_window_height()
		if (prev_w ~= self.screen_size.w or prev_h ~= self.screen_size.h) then
			self:window_size_changed()
			COMMON.EVENT_BUS:event(EVENTS.WINDOW_RESIZED, { width = self.screen_size.w, height = self.screen_size.h,
															prev_width = prev_w, prev_height = prev_h })
		end

	end)
end
--endregion


function Render:window_size_changed()
	RENDERCAM.update_window(self.screen_size.w, self.screen_size.h)
	self.gui_proj = vmath.matrix4_orthographic(0, self.screen_size.w, 0, self.screen_size.h, -1, 1)
end


--region draw
function Render:render_gui()
	-- GUI Rendering
	render.set_viewport(0, 0, RENDERCAM.window.x, RENDERCAM.window.y)
	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.predicates.gui)
	render.draw(self.predicates.text)
	render.disable_state(render.STATE_STENCIL_TEST)
end

function Render:render_sprites()
	render.set_viewport(RENDERCAM.viewport.x, RENDERCAM.viewport.y, RENDERCAM.viewport.width, RENDERCAM.viewport.height)
	render.set_view(RENDERCAM.calculate_view())
	render.set_projection(RENDERCAM.calculate_proj())

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	render.draw(self.predicates.tile)
	render.draw(self.predicates.particle)
end

--endregion

function Render:render_clear()
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({ [render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0 })
end

function Render:update(dt)
	self:render_clear()
	self:render_sprites()
	self:render_gui()

end

function Render:on_message(message_id, message)
	self.msg_receiver:on_message(self, message_id, message)
end

COMMON.N28S.register(Render())