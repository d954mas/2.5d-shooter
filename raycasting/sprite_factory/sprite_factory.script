local WORLD = require "world.world"
local PLAYER = WORLD.PLAYER
local HASHES = require "libs.hashes"
local MsgReceiver = require "libs.msg_receiver"
local LOG = require "libs.log"
local TAG = "SPRITE_FACTORY"
local COMMON = require "libs.common"

go.property("pool_size", 1024)
local SPRITE_STEP = 100 --increase pool when needed

local SPRITE_URLS = {} --all sprites
local SPRITES_POOL = {} --free and disabled sprites
local FREE_SPRITES = {} --sprites than enabled now. But will be disabled.
local ROTATED_SPRITE = {} --sprites than need be rotated to player

local STATIC_ZONES = {}
local DYNAMIC_OBJECTS = {}

--region spawn/unload
local function spawn(count)
	for i=1, count  do
		local sprite_url = factory.create("#factory")
		msg.post(sprite_url, HASHES.MSG_DISABLE)
		table.insert(SPRITES_POOL, sprite_url)
		table.insert(SPRITE_URLS, sprite_url)
	end	
end

local function free_sprite(sprite_url)
	if ROTATED_SPRITE[sprite_url] then
		ROTATED_SPRITE[sprite_url] = nil
	end
	table.insert(FREE_SPRITES, sprite_url)
end

local function free_sprite_from_table(sprites_table)
	for i = #sprites_table, 1, -1 do
		local sprite = table.remove(sprites_table)
		free_sprite(sprite)
	end
end

local function unload_sprite(sprite_url)
	msg.post(sprite_url, HASHES.MSG_DISABLE)
	table.insert(SPRITES_POOL, sprite_url)
end

local function unload_free_sprites()
	for i = #FREE_SPRITES, 1, -1 do
		local sprite = table.remove(FREE_SPRITES)
		unload_sprite(sprite)
	end
end

local get_free_sprite
get_free_sprite = function()
	if #FREE_SPRITES>0 then
		return table.remove(FREE_SPRITES)
	end
	if #SPRITES_POOL>0 then
		local sprite_url = table.remove(SPRITES_POOL)
		msg.post(sprite_url, HASHES.MSG_ENABLE)
		return sprite_url
	else
		LOG.w("no free sprites.Spawn more", TAG)
		spawn(SPRITE_STEP)
		return get_free_sprite()
	end

end

local vector_tmp = vmath.vector3(1)
local function load_sprite(sprite_data)
	assert(sprite_data, "sprite can't be nil")
	local sprite_url = get_free_sprite()
	sprite.play_flipbook(sprite_url, sprite_data.texture.texture)

	vector_tmp.x = sprite_data.width / sprite_data.texture.width
	vector_tmp.y = sprite_data.height / sprite_data.texture.height
	vector_tmp.z = 1
	go.set_scale(vector_tmp, sprite_url)

	vector_tmp.x = sprite_data.position.x
	vector_tmp.y = sprite_data.position.z
	vector_tmp.z = -sprite_data.position.y

	--vector_tmp.y = sprite_data.position.y
	--vector_tmp.z = sprite_data.position.z
	
	go.set_position(vector_tmp, sprite_url)
	go.set_rotation(sprite_data.angle, sprite_url)

	if sprite_data.player_angle then
		ROTATED_SPRITE[sprite_url] = true
	end
	return sprite_url
end

local function load_sprites_from_table(zone_sprites_table, sprites_table)
	for _, sprite in ipairs(sprites_table) do
		local sprite_url = load_sprite(sprite)
		table.insert(zone_sprites_table, sprite_url)
	end
end

--endregion

---MB REMOVE -?
local function get_zone_data(x, y)
	local id = (y-1)*WORLD.map.WIDTH + x
	local zone = STATIC_ZONES[id]
	if not zone then
		zone = {north = {}, south = {}, west = {}, east = {}, other = {}}
		STATIC_ZONES[id] = zone
	end	
	return zone
end

local function dispose()
	SPRITE_URLS = {}
	SPRITES_POOL = {}
	ROTATED_SPRITE = {}
	STATIC_ZONES = {}
	DYNAMIC_OBJECTS = {}
	FREE_SPRITES = {}
end

local function unload_all()
	ROTATED_SPRITE = {}
	SPRITES_POOL = {}
	STATIC_ZONES = {}
	DYNAMIC_OBJECTS = {}
	for _, sprite_url in ipairs(SPRITE_URLS) do
		free_sprite(SPRITE_URLS)
	end
	WORLD.DYNAMICS_OBJS:clear()
	unload_free_sprites()
end

local function msg_map_changed()
	LOG.i("msg_map_changed", TAG)
	unload_all()
end	

function init(self)
	spawn(self.pool_size)
	--WORLD.mc:registerObserver(WORLD.EVENTS.MAP_CHANGED, msg.url())
	self.msg_receiver = MsgReceiver()
--	self.msg_receiver:add(WORLD.EVENTS.MAP_CHANGED, msg_map_changed)
end

--Sprites go will be unloaded by engine
function final(self)
	--WORLD.mc:removeObserver(WORLD.EVENTS.MAP_CHANGED,msg.url())
	dispose()
end

local function rotate_player_angle_sprites()
	local angle = vmath.quat_rotation_y(-PLAYER.angle)
	for k, _ in pairs(ROTATED_SPRITE) do
		go.set_rotation(angle, k)
	end

	for k, v in pairs(WORLD.DYNAMICS_LBLS.objs) do
		go.set_rotation(angle, v.sprite)
	end
end

local function update_dynamics()
	for k, obj in pairs(WORLD.DYNAMICS_OBJS.objs) do
		if obj.need_delete then
			if obj.sprite_url then free_sprite(obj.sprite_url) end
			WORLD.DYNAMIC_OBJS.objs[k] = nil
		else
			local zone = get_zone_data(math.ceil(obj.sprite.position.x), math.ceil(obj.sprite.position.y))
			if zone.existed then
				if not obj.sprite_url then
					local sprite_url = load_sprite(obj.sprite)
					obj.sprite_url = sprite_url	
					ROTATED_SPRITE[sprite_url] = true
				end
			elseif obj.sprite_url then
				free_sprite(obj.sprite_url)
				obj.sprite_url = nil
			end
			
			if obj.sprite_url then
				vector_tmp.x = obj.sprite.position.x
				vector_tmp.y = obj.sprite.position.z
				vector_tmp.z = -obj.sprite.position.y
				go.set_position(vector_tmp,obj.sprite_url)
			end		
		end	
	end	--]]
end	

--reuse unload sprites before send msg unload
function update(self, dt)
	if WORLD.map == nil then return end
	native_raycasting.update_camera(PLAYER.position.x, PLAYER.position.y, PLAYER.angle)
	local need_load, need_update, need_unload = native_raycasting.update_sprites()

	for _,zone in ipairs(need_unload) do
		local zoneSprites = get_zone_data(zone.x, zone.y)
		assert(zoneSprites.existed, "can't unload not existed zone")
		free_sprite_from_table(zoneSprites.north)
		free_sprite_from_table(zoneSprites.south)
		free_sprite_from_table(zoneSprites.west)
		free_sprite_from_table(zoneSprites.east)
		free_sprite_from_table(zoneSprites.other)
		zoneSprites.existed = false
	end
	for _,zone in ipairs(need_update) do
		local cell = WORLD.map.CELLS[zone.y][zone.x]
		local zoneSprites = get_zone_data(zone.x, zone.y)
		assert(zoneSprites.existed, "can't update not existed zone")
		if zone.right then
			free_sprite_from_table(zoneSprites.east)
			load_sprites_from_table(zoneSprites.west, cell.west)
		else
			free_sprite_from_table(zoneSprites.west)
			load_sprites_from_table(zoneSprites.east, cell.east)
		end
		if zone.top then
			free_sprite_from_table(zoneSprites.north)
			load_sprites_from_table(zoneSprites.south, cell.south)
		else
			free_sprite_from_table(zoneSprites.south)
			load_sprites_from_table(zoneSprites.north, cell.north)
		end
	end

	for _,zone in ipairs(need_load) do
		local zoneSprites = get_zone_data(zone.x, zone.y)
		zoneSprites.existed = true
		local cell = WORLD.map.CELLS[zone.y][zone.x]
		load_sprites_from_table(zoneSprites.other, cell.other)
		if zone.right then
			load_sprites_from_table(zoneSprites.west, cell.west)
		else
			load_sprites_from_table(zoneSprites.east, cell.east)
		end
		if zone.top then
			load_sprites_from_table(zoneSprites.south, cell.south)
		else
			load_sprites_from_table(zoneSprites.north, cell.north)
		end
	end
	update_dynamics()
	rotate_player_angle_sprites()
	unload_free_sprites()

	COMMON.GLOBAL.used_sprites = #SPRITE_URLS - #SPRITES_POOL
end

function on_message(self, message_id, message, sender)
	self.msg_receiver:on_message(self, message_id, message, sender)
end